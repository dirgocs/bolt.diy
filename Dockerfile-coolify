FROM node:20.18.0-bookworm AS base
WORKDIR /app
SHELL ["/bin/bash", "-c"]

# Copia os arquivos de dependência para aproveitar cache
COPY package.json pnpm-lock.yaml ./

# Atualiza npm, instala Corepack, configura pnpm e Wrangler
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@latest-10 && \
    npm cache clean --force && \
    npm uninstall -g wrangler && \
    npm install -g wrangler@3.112.0 --force

# Instala as dependências do projeto
RUN pnpm install

# --- Início do estágio de Build ---
FROM base AS build
WORKDIR /app
COPY . .

# Pre-configura Wrangler para desabilitar métricas
RUN mkdir -p /root/.config/.wrangler && \
    echo '{"enabled":false}' > /root/.config/.wrangler/metrics.json

# Realiza o build da aplicação
RUN pnpm run build

# Ajusta permissões e corrige finais de linha (LF vs CRLF) para os scripts
RUN chmod +x postdeploy.sh bindings.sh entrypoint.sh coolify-setup.sh update-supabase-creds.sh inject-env-vars.sh && \
    for script in bindings.sh entrypoint.sh update-supabase-creds.sh coolify-setup.sh inject-env-vars.sh; do \
        tr -d '\r' < $script > ${script}.tmp && mv ${script}.tmp $script; \
    done

# --- Início do estágio de Production ---
FROM build AS production

# Define argumentos de build para segredos e variáveis de ambiente
ARG SESSION_SECRET
ARG SUPABASE_URL
ARG SUPABASE_SERVICE_KEY
ARG SUPABASE_ANON_KEY
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Seta as variáveis de ambiente na imagem final
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET} \
    SUPABASE_URL=${SUPABASE_URL} \
    SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY} \
    SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}

# Cria uma versão básica dos arquivos de ambiente (que serão posteriormente atualizados pelo entrypoint)
RUN echo "### Criando arquivos de ambiente básicos ###" && \
    { \
      echo "# .env.local - para o runtime da aplicação"; \
      echo "SESSION_SECRET=${SESSION_SECRET}"; \
      echo "SUPABASE_URL=${SUPABASE_URL}"; \
      echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}"; \
      echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}"; \
      echo "DATABASE_URL=${DATABASE_URL}"; \
      echo "NODE_ENV=${NODE_ENV:-production}"; \
      echo "RUNNING_IN_DOCKER=true"; \
      echo "DEFAULT_NUM_CTX=${DEFAULT_NUM_CTX}"; \
      echo "GROQ_API_KEY=${GROQ_API_KEY}"; \
      echo "HuggingFace_API_KEY=${HuggingFace_API_KEY}"; \
      echo "OPENAI_API_KEY=${OPENAI_API_KEY}"; \
      echo "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}"; \
      echo "OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}"; \
      echo "GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}"; \
      echo "OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL}"; \
      echo "OPENAI_LIKE_API_BASE_URL=${OPENAI_LIKE_API_BASE_URL}"; \
      echo "OPENAI_LIKE_API_KEY=${OPENAI_LIKE_API_KEY}"; \
      echo "TOGETHER_API_BASE_URL=${TOGETHER_API_BASE_URL}"; \
      echo "TOGETHER_API_KEY=${TOGETHER_API_KEY}"; \
      echo "DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}"; \
      echo "HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY}"; \
      echo "HYPERBOLIC_API_BASE_URL=${HYPERBOLIC_API_BASE_URL}"; \
      echo "MISTRAL_API_KEY=${MISTRAL_API_KEY}"; \
      echo "COHERE_API_KEY=${COHERE_API_KEY}"; \
      echo "LMSTUDIO_API_BASE_URL=${LMSTUDIO_API_BASE_URL}"; \
      echo "XAI_API_KEY=${XAI_API_KEY}"; \
      echo "PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}"; \
      echo "AWS_BEDROCK_CONFIG=${AWS_BEDROCK_CONFIG}"; \
      echo "VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-debug}"; \
    } > .env.local && \
    cp .env.local .dev.vars && \
    cp .env.local .env

# Cria o diretório para sessão com permissões apropriadas
RUN mkdir -p /app/session-data && chmod 777 /app/session-data

# Expõe a porta da aplicação
EXPOSE 5173

# Inicia o entrypoint
CMD ["bash", "/app/entrypoint.sh"]
