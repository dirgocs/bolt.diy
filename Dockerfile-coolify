FROM node:20.18.0-bullseye AS base

WORKDIR /app

# Use bash for all RUN commands
SHELL ["/bin/bash", "-c"]

# Copy dependency files to utilize cache
COPY package.json pnpm-lock.yaml ./

# Update npm, install Corepack, configure pnpm, and update Wrangler
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@latest-10 && \
    npm cache clean --force && \
    npm uninstall -g wrangler && \
    npm install -g wrangler@3.112.0 --force

# Install project dependencies
RUN pnpm install

# Build stage
FROM base AS build

WORKDIR /app

# Copy the rest of the project
COPY . .

# Make scripts executable
RUN chmod +x postdeploy.sh bindings.sh entrypoint.sh && \
    # Fix bindings.sh format
    tr -d '\r' < bindings.sh > bindings.tmp && \
    mv bindings.tmp bindings.sh

# Pre-configure Wrangler to disable metrics
RUN mkdir -p /root/.config/.wrangler && \
    echo '{"enabled":false}' > /root/.config/.wrangler/metrics.json

# Build the application
RUN pnpm run build

# Expose application port
EXPOSE 5173

# Production stage
FROM build AS production

# Define environment variables
ARG SESSION_SECRET
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Set environment variables in the production image
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET}

# Create a .env.local file with the SESSION_SECRET for local development
RUN echo "SESSION_SECRET=${SESSION_SECRET}" > .env.local

# Create Wrangler secret before starting the application
RUN echo "Setting Wrangler secret for SESSION_SECRET (this may fail if already set, which is okay)" && \
    echo "${SESSION_SECRET}" | wrangler secret put SESSION_SECRET --stdin || true

# Use the entrypoint script to ensure the secret is set before startup
ENTRYPOINT ["/app/entrypoint.sh"]
