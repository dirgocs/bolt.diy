FROM node:20.18.0-bookworm AS base
WORKDIR /app
SHELL ["/bin/bash", "-c"]

# Copia os arquivos de dependência para aproveitar cache
COPY package.json pnpm-lock.yaml ./

# Atualiza npm, instala Corepack, configura pnpm e Wrangler
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@latest-10 && \
    npm cache clean --force && \
    npm uninstall -g wrangler && \
    npm install -g wrangler@3.112.0 --force

# Instala as dependências do projeto
RUN pnpm install

# --- Início do estágio de Build ---
FROM base AS build
WORKDIR /app
COPY . .

# Pre-configura Wrangler para desabilitar métricas
RUN mkdir -p /root/.config/.wrangler && \
    echo '{"enabled":false}' > /root/.config/.wrangler/metrics.json

# Realiza o build da aplicação
RUN pnpm run build

# Ajusta permissões e corrige finais de linha (LF vs CRLF) para os scripts
RUN chmod +x postdeploy.sh bindings.sh entrypoint.sh coolify-setup.sh update-supabase-creds.sh inject-env-vars.sh && \
    for script in bindings.sh entrypoint.sh update-supabase-creds.sh coolify-setup.sh inject-env-vars.sh; do \
        tr -d '\r' < $script > ${script}.tmp && mv ${script}.tmp $script; \
    done

# Executa os scripts de setup e injeção DESTE estágio (para persistir as alterações no build)
RUN bash ./coolify-setup.sh && \
    bash ./inject-env-vars.sh

# --- Início do estágio de Production ---
FROM build AS production

# Define argumentos de build para segredos e variáveis de ambiente
ARG SESSION_SECRET
ARG SUPABASE_URL
ARG SUPABASE_SERVICE_KEY
ARG SUPABASE_ANON_KEY
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Seta as variáveis de ambiente na imagem final
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET} \
    SUPABASE_URL=${SUPABASE_URL} \
    SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY} \
    SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}

# Atualiza (patcha) os arquivos de ambiente sem sobrescrevê-los completamente
RUN echo "### Atualizando arquivos de ambiente consolidados ###" && \
    if [ -f .env.local ]; then \
      for var in SESSION_SECRET SUPABASE_URL SUPABASE_ANON_KEY SUPABASE_SERVICE_KEY DATABASE_URL NODE_ENV RUNNING_IN_DOCKER DEFAULT_NUM_CTX GROQ_API_KEY HuggingFace_API_KEY OPENAI_API_KEY ANTHROPIC_API_KEY OPEN_ROUTER_API_KEY GOOGLE_GENERATIVE_AI_API_KEY OLLAMA_API_BASE_URL OPENAI_LIKE_API_BASE_URL OPENAI_LIKE_API_KEY TOGETHER_API_BASE_URL TOGETHER_API_KEY DEEPSEEK_API_KEY HYPERBOLIC_API_KEY HYPERBOLIC_API_BASE_URL MISTRAL_API_KEY COHERE_API_KEY LMSTUDIO_API_BASE_URL XAI_API_KEY PERPLEXITY_API_KEY AWS_BEDROCK_CONFIG VITE_LOG_LEVEL; do \
          value=$(printenv $var); \
          if grep -q "^$var=" .env.local; then \
            sed -i "s|^$var=.*|$var=$value|" .env.local; \
          else \
            echo "$var=$value" >> .env.local; \
          fi; \
      done; \
    else \
      echo "# .env.local - para o runtime da aplicação" > .env.local; \
      for var in SESSION_SECRET SUPABASE_URL SUPABASE_ANON_KEY SUPABASE_SERVICE_KEY DATABASE_URL NODE_ENV RUNNING_IN_DOCKER DEFAULT_NUM_CTX GROQ_API_KEY HuggingFace_API_KEY OPENAI_API_KEY ANTHROPIC_API_KEY OPEN_ROUTER_API_KEY GOOGLE_GENERATIVE_AI_API_KEY OLLAMA_API_BASE_URL OPENAI_LIKE_API_BASE_URL OPENAI_LIKE_API_KEY TOGETHER_API_BASE_URL TOGETHER_API_KEY DEEPSEEK_API_KEY HYPERBOLIC_API_KEY HYPERBOLIC_API_BASE_URL MISTRAL_API_KEY COHERE_API_KEY LMSTUDIO_API_BASE_URL XAI_API_KEY PERPLEXITY_API_KEY AWS_BEDROCK_CONFIG VITE_LOG_LEVEL; do \
          echo "$var=$(printenv $var)" >> .env.local; \
      done; \
    fi && \
    cp .env.local .dev.vars && \
    cp .env.local .env

# Cria o diretório para sessão com permissões apropriadas
RUN mkdir -p /app/session-data && chmod 777 /app/session-data

# Expõe a porta da aplicação
EXPOSE 5173

# Inicia o entrypoint
CMD ["bash", "/app/entrypoint.sh"]
