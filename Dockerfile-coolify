FROM node:20.18.0-bookworm AS base

WORKDIR /app

# Use bash for all RUN commands
SHELL ["/bin/bash", "-c"]

# Instalar psql (cliente do PostgreSQL) e mc (MinIO Client)
RUN apt-get update && \
    apt-get install -y postgresql-client mc && \
    rm -rf /var/lib/apt/lists/*

# Copy dependency files to utilize cache
COPY package.json pnpm-lock.yaml ./

# Update npm, install Corepack, configure pnpm, and update Wrangler
RUN npm install -g npm@latest && \
    npm install -g corepack@latest && \
    corepack enable pnpm && \
    corepack use pnpm@latest-10 && \
    npm cache clean --force && \
    npm uninstall -g wrangler && \
    npm install -g wrangler@3.112.0 --force

# Install project dependencies
RUN pnpm install

# Build stage
FROM base AS build

WORKDIR /app

# Copy the rest of the project
COPY . .

# Make scripts executable and run setup script during build
RUN chmod +x postdeploy.sh bindings.sh entrypoint.sh coolify-setup.sh && \
    # Fix bindings.sh format
    tr -d '\r' < bindings.sh > bindings.tmp && \
    mv bindings.tmp bindings.sh && \
    # Run setup script during build
    ./coolify-setup.sh

# Pre-configure Wrangler to disable metrics
RUN mkdir -p /root/.config/.wrangler && \
    echo '{"enabled":false}' > /root/.config/.wrangler/metrics.json

# Build the application
RUN pnpm run build

# Expose application port
EXPOSE 5173

# Production stage
FROM build AS production

# Define environment variables
ARG SESSION_SECRET
ARG SUPABASE_URL
ARG SUPABASE_SERVICE_KEY
ARG SUPABASE_ANON_KEY
ARG NODE_ENV
ARG RUNNING_IN_DOCKER=true

# Set environment variables in the production image - FIXED LINE BREAKS
ENV NODE_ENV=${NODE_ENV:-production} \
    RUNNING_IN_DOCKER=${RUNNING_IN_DOCKER} \
    SESSION_SECRET=${SESSION_SECRET} \
    SUPABASE_URL=${SUPABASE_URL} \
    SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY} \
    SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}

# Create a comprehensive .env.local file with all possible environment variables
RUN echo "# Environment variables for bolt.diy" > .env.local && \
    echo "SESSION_SECRET=${SESSION_SECRET}" >> .env.local && \
    echo "SUPABASE_URL=${SUPABASE_URL}" >> .env.local && \
    echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .env.local && \
    echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}" >> .env.local && \
    echo "DATABASE_URL=${DATABASE_URL}" >> .env.local && \
    echo "NODE_ENV=${NODE_ENV:-production}" >> .env.local && \
    echo "RUNNING_IN_DOCKER=true" >> .env.local && \
    echo "DEFAULT_NUM_CTX=${DEFAULT_NUM_CTX}" >> .env.local && \
    echo "GROQ_API_KEY=${GROQ_API_KEY}" >> .env.local && \
    echo "HuggingFace_API_KEY=${HuggingFace_API_KEY}" >> .env.local && \
    echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env.local && \
    echo "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}" >> .env.local && \
    echo "OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}" >> .env.local && \
    echo "GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}" >> .env.local && \
    echo "OLLAMA_API_BASE_URL=${OLLAMA_API_BASE_URL}" >> .env.local && \
    echo "OPENAI_LIKE_API_BASE_URL=${OPENAI_LIKE_API_BASE_URL}" >> .env.local && \
    echo "OPENAI_LIKE_API_KEY=${OPENAI_LIKE_API_KEY}" >> .env.local && \
    echo "TOGETHER_API_BASE_URL=${TOGETHER_API_BASE_URL}" >> .env.local && \
    echo "TOGETHER_API_KEY=${TOGETHER_API_KEY}" >> .env.local && \
    echo "DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}" >> .env.local && \
    echo "HYPERBOLIC_API_KEY=${HYPERBOLIC_API_KEY}" >> .env.local && \
    echo "HYPERBOLIC_API_BASE_URL=${HYPERBOLIC_API_BASE_URL}" >> .env.local && \
    echo "MISTRAL_API_KEY=${MISTRAL_API_KEY}" >> .env.local && \
    echo "COHERE_API_KEY=${COHERE_API_KEY}" >> .env.local && \
    echo "LMSTUDIO_API_BASE_URL=${LMSTUDIO_API_BASE_URL}" >> .env.local && \
    echo "XAI_API_KEY=${XAI_API_KEY}" >> .env.local && \
    echo "PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}" >> .env.local && \
    echo "AWS_BEDROCK_CONFIG=${AWS_BEDROCK_CONFIG}" >> .env.local && \
    echo "VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-debug}" >> .env.local

# Create .dev.vars file for Wrangler Pages
RUN echo "Creating .dev.vars file for Wrangler Pages" && \
    echo "SESSION_SECRET=${SESSION_SECRET}" > .dev.vars && \
    echo "SUPABASE_URL=${SUPABASE_URL}" >> .dev.vars && \
    echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .dev.vars && \
    echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}" >> .dev.vars && \
    echo "DATABASE_URL=${DATABASE_URL}" >> .dev.vars && \
    echo "Created .dev.vars with SESSION_SECRET, SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY and DATABASE_URL for local development"

# Create session-data directory with proper permissions
RUN mkdir -p /app/session-data && \
    chmod 777 /app/session-data

# Use the entrypoint script to ensure the secret is set before startup
ENTRYPOINT ["/app/entrypoint.sh"]
